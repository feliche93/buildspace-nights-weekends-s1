{
  "address": "0xF8e31cb472bc70500f08Cd84917E5A1912Ec8397",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_linkTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oralcleAddr",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "goalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "username",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "goal",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "current",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "goalOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPledged",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "achieved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct GoalContractV1.Goal",
          "name": "goal",
          "type": "tuple"
        }
      ],
      "name": "GoalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "goal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "goalOwnerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        }
      ],
      "name": "GoalEvaluated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "goalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct GoalContractV1.GoalEvaluateRequest",
          "name": "goalEvalRequest",
          "type": "tuple"
        }
      ],
      "name": "GoalEvaluationRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "goalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "username",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "goal",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "current",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "goalOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPledged",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "achieved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct GoalContractV1.Goal",
          "name": "goal",
          "type": "tuple"
        }
      ],
      "name": "GoalEvauated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "goal",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "goalOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPledged",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct GoalContractV1.GoalRequest",
          "name": "goalRequest",
          "type": "tuple"
        }
      ],
      "name": "GoalRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "goal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "goalOwnerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPledged",
          "type": "uint256"
        }
      ],
      "name": "PledgedAmountWithdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amountLockedByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goalId",
          "type": "uint256"
        }
      ],
      "name": "createGoalEvaluationRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "goal",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "name": "createGoalRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payload",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userId",
          "type": "uint256"
        }
      ],
      "name": "fulfillGoalEvaluationRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payload",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_username",
          "type": "uint256"
        }
      ],
      "name": "fulfillGoalRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "getGoalRequestFufilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "getLastUserGoal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "goalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "username",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "goal",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "current",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "goalOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPledged",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "achieved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            }
          ],
          "internalType": "struct GoalContractV1.Goal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "getUserGoals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "goalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "username",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "goal",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "current",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "goalOwnerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPledged",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "achieved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            }
          ],
          "internalType": "struct GoalContractV1.Goal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goalsAchieved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "username",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "goal",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "goalOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPledged",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "achieved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "withdrawn",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "ended",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToGoalEvaluationRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToGoalRequest",
      "outputs": [
        {
          "internalType": "string",
          "name": "goal",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "goalOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPledged",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "requestLastUserTweetTs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeStamp",
          "type": "uint256"
        }
      ],
      "name": "requestLikesSinceTs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userToGoalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToLastReqId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x49a1588c4c02bc8b11ed86ccde1fd6c84471816464b5bdab32a5fa9bea068555",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xF8e31cb472bc70500f08Cd84917E5A1912Ec8397",
    "transactionIndex": 0,
    "gasUsed": "3711203",
    "logsBloom": "0x
    "blockHash": "0x4eb2ed59409081c008968135315bde2faca020e70074d44fe0d94ba9ee585a04",
    "transactionHash": "0x49a1588c4c02bc8b11ed86ccde1fd6c84471816464b5bdab32a5fa9bea068555",
    "logs": [],
    "blockNumber": 107,
    "cumulativeGasUsed": "3711203",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 4,
  "solcInputHash": "3e013551cadb5de83f2638d2aa3006ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oralcleAddr\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"username\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct GoalContractV1.Goal\",\"name\":\"goal\",\"type\":\"tuple\"}],\"name\":\"GoalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"}],\"name\":\"GoalEvaluated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct GoalContractV1.GoalEvaluateRequest\",\"name\":\"goalEvalRequest\",\"type\":\"tuple\"}],\"name\":\"GoalEvaluationRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"username\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct GoalContractV1.Goal\",\"name\":\"goal\",\"type\":\"tuple\"}],\"name\":\"GoalEvauated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct GoalContractV1.GoalRequest\",\"name\":\"goalRequest\",\"type\":\"tuple\"}],\"name\":\"GoalRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"}],\"name\":\"PledgedAmountWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountLockedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goalId\",\"type\":\"uint256\"}],\"name\":\"createGoalEvaluationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"createGoalRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payload\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"fulfillGoalEvaluationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payload\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_username\",\"type\":\"uint256\"}],\"name\":\"fulfillGoalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getGoalRequestFufilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getLastUserGoal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"username\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct GoalContractV1.Goal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserGoals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"username\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct GoalContractV1.Goal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goalsAchieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"username\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"achieved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToGoalEvaluationRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToGoalRequest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"goalOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPledged\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"requestLastUserTweetTs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"requestLikesSinceTs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToGoalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToLastReqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GoalContractV1.sol\":\"GoalContractV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ChainlinkTwitterAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ChainlinkTwitterAdapter is ChainlinkClient {\\n    using Chainlink for Chainlink.Request;\\n    uint256 private constant ORACLE_PAYMENT = 1 * LINK_DIVISIBILITY;\\n    address public oracle;\\n    bytes32 private jobId;\\n    uint256 private fee;\\n\\n    enum APIFuncToCall {\\n        LATEST_TWEET_TS,\\n        LIKES_SINCE_TS\\n    }\\n\\n    constructor(address _linkTokenAddr, address _oralcleAddr) {\\n        setChainlinkToken(_linkTokenAddr);\\n        oracle = _oralcleAddr; // oracle address\\n        jobId = \\\"2cc926226a6a4975ae499c873525e881\\\"; //job id\\n\\n        console.log(\\\"LinkToken address: %s\\\", _linkTokenAddr);\\n        console.log(\\\"Oracle address: %s\\\", _oralcleAddr);\\n    }\\n\\n    function requestLastUserTweetTs(string memory _username)\\n        public\\n        returns (bytes32)\\n    {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfillGoalRequest.selector\\n        );\\n        req.add(\\\"username\\\", _username);\\n        req.add(\\\"method\\\", \\\"latest_tweet_ts\\\");\\n        req.add(\\\"userid\\\", \\\"\\\");\\n        req.add(\\\"unix_ts\\\", \\\"\\\");\\n        bytes32 requestId = sendChainlinkRequestTo(oracle, req, 0);\\n\\n        // console.log(\\\"Requested last tweet timestamp for user: %s\\\", _username);\\n\\n        return requestId;\\n    }\\n\\n    function requestLikesSinceTs(uint256 _userId, uint256 _timeStamp)\\n        public\\n        returns (bytes32)\\n    {\\n        console.log(\\\"Requesting likes since timestamp: %d\\\", _timeStamp);\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfillGoalEvaluationRequest.selector\\n        );\\n        req.add(\\\"username\\\", \\\"\\\");\\n        req.add(\\\"method\\\", \\\"likes_since_ts\\\");\\n        req.addUint(\\\"userid\\\", _userId);\\n        req.addUint(\\\"unix_ts\\\", _timeStamp);\\n        bytes32 requestId = sendChainlinkRequestTo(oracle, req, 0);\\n        return requestId;\\n    }\\n\\n    //callback function\\n    function fulfillGoalRequest(\\n        bytes32 _requestId,\\n        uint256 _payload,\\n        uint256 _userId\\n    ) public virtual recordChainlinkFulfillment(_requestId) {\\n        console.log(\\\"Fulfilling fulfillGoalRequest.\\\");\\n    }\\n\\n    function fulfillGoalEvaluationRequest(\\n        bytes32 _requestId,\\n        uint256 _payload,\\n        uint256 _userId\\n    ) public virtual recordChainlinkFulfillment(_requestId) {\\n        console.log(\\\"Fulfilling fulfillGoalEvaluationRequest.\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xaebbe66795da7d84b06159508e12edb088782821983d3752db5d67e104d77a55\",\"license\":\"MIT\"},\"contracts/GoalContractV1.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ChainlinkTwitterAdapter.sol\\\";\\n\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n\\ncontract GoalContractV1 is ReentrancyGuard, ChainlinkTwitterAdapter {\\n    using Counters for Counters.Counter;\\n    Counters.Counter public goalIds;\\n    Counters.Counter public goalsAchieved;\\n\\n    struct Goal {\\n        uint256 goalId;\\n        uint256 username;\\n        string goal;\\n        uint256 current;\\n        uint256 target;\\n        uint256 startDate;\\n        uint256 endDate;\\n        address goalOwnerAddress;\\n        uint256 amountPledged;\\n        bool achieved;\\n        bool withdrawn;\\n        bool ended;\\n    }\\n\\n    struct GoalRequest {\\n        string goal;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 target;\\n        address goalOwnerAddress;\\n        uint256 amountPledged;\\n        bool fulfilled;\\n    }\\n\\n    struct GoalEvaluateRequest {\\n        uint256 goalId;\\n        bool fulfilled;\\n    }\\n\\n    mapping(uint256 => Goal) public idToGoal;\\n    mapping(address => uint256[]) public userToGoalIds;\\n    mapping(address => bytes32) public userToLastReqId;\\n    mapping(bytes32 => GoalRequest) public requestIdToGoalRequest;\\n    mapping(bytes32 => GoalEvaluateRequest)\\n        public requestIdToGoalEvaluationRequest;\\n    mapping(address => uint256) public amountLockedByAddress;\\n\\n    constructor(address _linkTokenAddr, address _oralcleAddr)\\n        payable\\n        ChainlinkTwitterAdapter(_linkTokenAddr, _oralcleAddr)\\n    {}\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    event GoalRequestCreated(GoalRequest goalRequest);\\n    event GoalCreated(Goal goal);\\n    event GoalEvaluationRequestCreated(GoalEvaluateRequest goalEvalRequest);\\n    event GoalEvauated(Goal goal);\\n\\n    event GoalEvaluated(\\n        uint256 goalId,\\n        string goal,\\n        address goalOwnerAddress,\\n        bool achieved\\n    );\\n\\n    event PledgedAmountWithdrawn(\\n        uint256 goalId,\\n        string goal,\\n        address goalOwnerAddress,\\n        uint256 amountPledged\\n    );\\n\\n    // @notice Create a new goal\\n    // @param goal he goal to be achieved\\n    // @param username the username of the user who created the goal\\n    // @param endDate the date the goal should be achieved by\\n    // @dev Goal Request gets created and oracle is called to test before goal creation\\n    function createGoalRequest(\\n        string memory goal,\\n        uint256 target,\\n        string memory username,\\n        uint256 startDate,\\n        uint256 endDate\\n    ) public payable {\\n        // require(deadlineInDays > 0, \\\"Deadline must be at least 1 day\\\");\\n\\n        bytes32 requestId = requestLastUserTweetTs(username);\\n\\n        console.log(\\\"Username: %s\\\", username);\\n        console.log(\\\"Target: %d\\\", target);\\n        console.log(\\\"Start Date: %d\\\", startDate);\\n        console.log(\\\"End Date: %d\\\", endDate);\\n        console.log(\\\"goal: %s\\\", goal);\\n\\n        userToLastReqId[msg.sender] = requestId;\\n\\n        GoalRequest memory greq = GoalRequest(\\n            goal, // e.g. \\\"Status Updates\\\"\\n            startDate, // e.g. 1546300800\\n            endDate, // unix timestamp when goal is due to be achieved\\n            target, // e.g. 100\\n            msg.sender, // address of the goal owner\\n            msg.value, // amount of ether pledged by the goal owner\\n            false // whether the goal has been fulfilled\\n        );\\n\\n        requestIdToGoalRequest[requestId] = greq;\\n\\n        emit GoalRequestCreated(greq);\\n    }\\n\\n    function createGoalEvaluationRequest(uint256 _goalId) public {\\n        Goal memory goal = idToGoal[_goalId];\\n        require(\\n            goal.endDate <= block.timestamp,\\n            \\\"Your challenge is not over yet!\\\"\\n        );\\n        bytes32 requestId = requestLikesSinceTs(goal.username, goal.startDate);\\n        GoalEvaluateRequest memory gereq = GoalEvaluateRequest(\\n            _goalId,\\n            false //fillfilment\\n        );\\n\\n        requestIdToGoalEvaluationRequest[requestId] = gereq;\\n\\n        emit GoalEvaluationRequestCreated(gereq);\\n    }\\n\\n    function fulfillGoalRequest(\\n        bytes32 _requestId,\\n        uint256 _payload,\\n        uint256 _username\\n    ) public override recordChainlinkFulfillment(_requestId) {\\n        console.log(\\\"fufilled goal request\\\");\\n        GoalRequest memory greq = requestIdToGoalRequest[_requestId];\\n        greq.fulfilled = true;\\n        goalIds.increment();\\n        uint256 goalId = goalIds.current();\\n        uint256[] storage userGoalIds = userToGoalIds[msg.sender];\\n        userGoalIds.push(goalId);\\n        amountLockedByAddress[payable(msg.sender)] += greq.amountPledged;\\n        Goal memory goal = Goal(\\n            goalId, // goalId\\n            _username,\\n            greq.goal, // goal\\n            _payload, //current\\n            greq.target, // target\\n            greq.startDate, // startDate\\n            greq.endDate, // endDate\\n            greq.goalOwnerAddress,\\n            greq.amountPledged,\\n            false, // achieved\\n            false, // withdrawn\\n            false // ended\\n        );\\n        idToGoal[goalId] = goal;\\n        emit GoalCreated(goal);\\n    }\\n\\n    function fulfillGoalEvaluationRequest(\\n        bytes32 _requestId,\\n        uint256 _payload,\\n        uint256 _userId\\n    ) public override recordChainlinkFulfillment(_requestId) {\\n        GoalEvaluateRequest memory gereq = requestIdToGoalEvaluationRequest[\\n            _requestId\\n        ];\\n        Goal storage goal = idToGoal[gereq.goalId];\\n        uint256 increment = _payload - goal.current;\\n        bool goal_reached = increment >= goal.target;\\n        require(goal_reached, \\\"You did not reach your goal\\\");\\n    }\\n\\n    function getGoalRequestFufilled(bytes32 _requestId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return requestIdToGoalRequest[_requestId].fulfilled;\\n    }\\n\\n    function getUserGoals(address userAddr)\\n        public\\n        view\\n        returns (Goal[] memory)\\n    {\\n        uint256[] memory userGoalIds = userToGoalIds[userAddr];\\n        Goal[] memory goals = new Goal[](userGoalIds.length);\\n        for (uint256 i = 0; i < userGoalIds.length; i++) {\\n            goals[i] = idToGoal[userGoalIds[i]];\\n        }\\n        return goals;\\n    }\\n\\n    function getLastUserGoal(address userAddr)\\n        public\\n        view\\n        returns (Goal memory)\\n    {\\n        uint256[] memory userGoalIds = userToGoalIds[userAddr];\\n        return idToGoal[userGoalIds[userGoalIds.length - 1]];\\n    }\\n\\n    // function evaluateGoal(uint256 goalId, bool achieved) public {\\n    //     require(idToGoal[goalId].goalId > 0, \\\"Goal must be started\\\");\\n    //     // require(\\n    //     //     !idToGoal[goalId].ended,\\n    //     //     \\\"Goal has already ended and been verified\\\"\\n    //     // );\\n    //     require(\\n    //         block.timestamp >= idToGoal[goalId].deadline,\\n    //         \\\"Goal deadline has not passed yet.\\\"\\n    //     );\\n\\n    // goalsAchieved.increment();\\n    // idToGoal[goalId].achieved = achieved;\\n    // idToGoal[goalId].ended = true;\\n\\n    // emit GoalEvaluated(\\n    //     idToGoal[goalId].goalId,\\n    //     idToGoal[goalId].goal,\\n    //     idToGoal[goalId].goalOwnerAddress,\\n    //     idToGoal[goalId].achieved\\n    // );\\n    // }\\n\\n    // function withdrawFunds(uint256 goalId) public nonReentrant {\\n    //     require(\\n    //         msg.sender == idToGoal[goalId].goalOwnerAddress,\\n    //         \\\"Only goal owner can withdraw funds\\\"\\n    //     );\\n    //     require(idToGoal[goalId].started, \\\"Goal must be started\\\");\\n    //     require(idToGoal[goalId].ended, \\\"Goal has not ended yet\\\");\\n    //     require(\\n    //         block.timestamp >= idToGoal[goalId].deadline,\\n    //         \\\"Goal deadline has not passed yet.\\\"\\n    //     );\\n    //     require(!idToGoal[goalId].withdrawn, \\\"Goal has already been withdrawn\\\");\\n    //     require(\\n    //         idToGoal[goalId].achieved,\\n    //         \\\"Goal has not been verified as achieved\\\"\\n    //     );\\n\\n    //     idToGoal[goalId].withdrawn = true;\\n    //     idToGoal[goalId].ended = true;\\n\\n    //     (bool sent, ) = msg.sender.call{value: idToGoal[goalId].amountPledged}(\\n    //         \\\"\\\"\\n    //     );\\n    //     require(sent, \\\"Failed to send user ETH back\\\");\\n\\n    //     emit PledgedAmountWithdrawn(\\n    //         idToGoal[goalId].goalId,\\n    //         idToGoal[goalId].goal,\\n    //         idToGoal[goalId].goalOwnerAddress,\\n    //         idToGoal[goalId].amountPledged\\n    //     );\\n    // }\\n\\n    /* Returns goals that a user can evaluate */\\n    // function fetchEvaluationsByAddress(address targetAddresss)\\n    //     public\\n    //     view\\n    //     returns (Goal[] memory)\\n    // {\\n    //     uint256 totalGoalCount = goalIds.current();\\n    //     uint256 GoalCount = 0;\\n    //     uint256 currentIndex = 0;\\n\\n    //     console.log(\\\"Total goal count: %s\\\", totalGoalCount);\\n    //     console.log(\\\"Target Address: %s\\\", targetAddresss);\\n\\n    //     for (uint256 i = 0; i < totalGoalCount; i++) {\\n    //         console.log(\\\"i: %s\\\", i);\\n    //         if (\\n    //             idToGoal[i + 1].goalCheckerAddress == targetAddresss &&\\n    //             !idToGoal[i + 1].ended\\n    //         ) {\\n    //             console.log(\\n    //                 \\\"Goal Checker Address: %s\\\",\\n    //                 idToGoal[i + 1].goalCheckerAddress\\n    //             );\\n    //             GoalCount += 1;\\n    //         }\\n    //     }\\n\\n    //     console.log(\\\"Goal count: %s\\\", GoalCount);\\n\\n    //     Goal[] memory goals = new Goal[](GoalCount);\\n    //     for (uint256 i = 0; i < totalGoalCount; i++) {\\n    //         if (\\n    //             idToGoal[i + 1].goalCheckerAddress == targetAddresss &&\\n    //             !idToGoal[i + 1].ended\\n    //         ) {\\n    //             uint256 currentId = i + 1;\\n    //             Goal storage currentItem = idToGoal[currentId];\\n    //             goals[currentIndex] = currentItem;\\n    //             currentIndex += 1;\\n    //         }\\n    //     }\\n\\n    //     return goals;\\n    // }\\n\\n    /* Returns goals that a user complete */\\n    // function fetchAchievedByAddress(address targetAddresss)\\n    //     public\\n    //     view\\n    //     returns (Goal[] memory)\\n    // {\\n    //     uint256 totalGoalCount = goalIds.current();\\n    //     uint256 GoalCount = 0;\\n    //     uint256 currentIndex = 0;\\n\\n    //     console.log(\\\"Total goal count: %s\\\", totalGoalCount);\\n    //     console.log(\\\"Target Address: %s\\\", targetAddresss);\\n\\n    //     for (uint256 i = 0; i < totalGoalCount; i++) {\\n    //         console.log(\\\"i: %s\\\", i);\\n    //         if (\\n    //             idToGoal[i + 1].goalOwnerAddress == targetAddresss &&\\n    //             idToGoal[i + 1].achieved &&\\n    //             !idToGoal[i + 1].withdrawn\\n    //         ) {\\n    //             console.log(\\n    //                 \\\"Goal Checker Address: %s\\\",\\n    //                 idToGoal[i + 1].goalCheckerAddress\\n    //             );\\n    //             GoalCount += 1;\\n    //         }\\n    //     }\\n\\n    //     console.log(\\\"Goal count: %s\\\", GoalCount);\\n\\n    //     Goal[] memory goals = new Goal[](GoalCount);\\n    //     for (uint256 i = 0; i < totalGoalCount; i++) {\\n    //         if (\\n    //             idToGoal[i + 1].goalOwnerAddress == targetAddresss &&\\n    //             idToGoal[i + 1].achieved &&\\n    //             !idToGoal[i + 1].withdrawn\\n    //         ) {\\n    //             uint256 currentId = i + 1;\\n    //             Goal storage currentItem = idToGoal[currentId];\\n    //             goals[currentIndex] = currentItem;\\n    //             currentIndex += 1;\\n    //         }\\n    //     }\\n\\n    //     return goals;\\n    // }\\n\\n    // to support receiving ETH by default\\n}\\n\",\"keccak256\":\"0xf10ff8543b3f2d9d95952ae58e1704120c8cefacea51428c46b6740fd99429af\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016005556040516200440d3803806200440d83398181016040528101906200002e91906200027d565b8181600160008190555062000049826200015360201b60201c565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3263633932363232366136613439373561653439396338373335323565383831600881905550620000fd6040518060400160405280601581526020017f4c696e6b546f6b656e20616464726573733a2025730000000000000000000000815250836200019760201b62001dc51760201c565b620001496040518060400160405280601281526020017f4f7261636c6520616464726573733a2025730000000000000000000000000000815250826200019760201b62001dc51760201c565b5050505062000400565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002398282604051602401620001b092919062000316565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200023d60201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000815190506200027781620003e6565b92915050565b60008060408385031215620002975762000296620003d0565b5b6000620002a78582860162000266565b9250506020620002ba8582860162000266565b9150509250929050565b620002cf8162000366565b82525050565b6000620002e2826200034a565b620002ee818562000355565b9350620003008185602086016200039a565b6200030b81620003d5565b840191505092915050565b60006040820190508181036000830152620003328185620002d5565b9050620003436020830184620002c4565b9392505050565b600081519050919050565b600082825260208201905092915050565b600062000373826200037a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620003ba5780820151818401526020810190506200039d565b83811115620003ca576000848401525b50505050565b600080fd5b6000601f19601f8301169050919050565b620003f18162000366565b8114620003fd57600080fd5b50565b613ffd80620004106000396000f3fe60806040526004361061010d5760003560e01c80637dc0d1d011610095578063c1ea96d611610064578063c1ea96d6146103cb578063e18df9fa14610408578063e56e25f514610445578063ef7dfa1d1461046e578063fc1f22e51461049757610114565b80637dc0d1d0146102f5578063aedf0a4a14610320578063b9fa2c6b1461035d578063beb3e4281461038857610114565b8063442f1e91116100dc578063442f1e91146101f85780634ddd147a1461021457806356b18b3214610252578063605ad2f91461028f57806378cb58e3146102cc57610114565b80630a00663714610116578063320936931461015357806335742c631461017e5780633dd445cf146101bb57610114565b3661011457005b005b34801561012257600080fd5b5061013d60048036038101906101389190612c68565b6104df565b60405161014a91906134b6565b60405180910390f35b34801561015f57600080fd5b5061016861050c565b60405161017591906136fa565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190612bce565b610518565b6040516101b29190613494565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd9190612e11565b610805565b6040516101ef91906134d1565b60405180910390f35b610212600480360381019061020d9190612d31565b6109ea565b005b34801561022057600080fd5b5061023b60048036038101906102369190612c68565b610cc9565b604051610249929190613715565b60405180910390f35b34801561025e57600080fd5b5061027960048036038101906102749190612bce565b610cfa565b60405161028691906136fa565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190612bfb565b610d12565b6040516102c391906136fa565b60405180910390f35b3480156102d857600080fd5b506102f360048036038101906102ee9190612c95565b610d43565b005b34801561030157600080fd5b5061030a6112b4565b60405161031791906133b6565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190612ce8565b6112da565b60405161035491906134d1565b60405180910390f35b34801561036957600080fd5b506103726114aa565b60405161037f91906136fa565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190612c68565b6114b6565b6040516103c297969594939291906135a5565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190612bce565b6115ad565b6040516103ff91906136d8565b60405180910390f35b34801561041457600080fd5b5061042f600480360381019061042a9190612bce565b611814565b60405161043c91906134d1565b60405180910390f35b34801561045157600080fd5b5061046c60048036038101906104679190612de4565b61182c565b005b34801561047a57600080fd5b5061049560048036038101906104909190612c95565b611ac5565b005b3480156104a357600080fd5b506104be60048036038101906104b99190612de4565b611c96565b6040516104d69c9b9a9998979695949392919061373e565b60405180910390f35b6000600f600083815260200190815260200160002060060160009054906101000a900460ff169050919050565b600b8060000154905081565b60606000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156105a557602002820191906000526020600020905b815481526020019060010190808311610591575b505050505090506000815167ffffffffffffffff8111156105c9576105c8613de9565b5b60405190808252806020026020018201604052801561060257816020015b6105ef612963565b8152602001906001900390816105e75790505b50905060005b82518110156107fa57600c600084838151811061062857610627613dba565b5b6020026020010151815260200190815260200160002060405180610180016040529081600082015481526020016001820154815260200160028201805461066e90613c22565b80601f016020809104026020016040519081016040528092919081815260200182805461069a90613c22565b80156106e75780601f106106bc576101008083540402835291602001916106e7565b820191906000526020600020905b8154815290600101906020018083116106ca57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff161515151581526020016009820160029054906101000a900460ff1615151515815250508282815181106107dc576107db613dba565b5b602002602001018190525080806107f290613c85565b915050610608565b508092505050919050565b6000610829604051806060016040528060248152602001613fa46024913983611e61565b600061083f6008543063ef7dfa1d60e01b611efd565b905061089a6040518060400160405280600881526020017f757365726e616d650000000000000000000000000000000000000000000000008152506040518060200160405280600081525083611f2e9092919063ffffffff16565b6109196040518060400160405280600681526020017f6d6574686f6400000000000000000000000000000000000000000000000000008152506040518060400160405280600e81526020017f6c696b65735f73696e63655f747300000000000000000000000000000000000081525083611f2e9092919063ffffffff16565b6109636040518060400160405280600681526020017f75736572696400000000000000000000000000000000000000000000000000008152508583611f619092919063ffffffff16565b6109ad6040518060400160405280600781526020017f756e69785f7473000000000000000000000000000000000000000000000000008152508483611f619092919063ffffffff16565b60006109dd600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000611f94565b9050809250505092915050565b60006109f5846112da565b9050610a366040518060400160405280600c81526020017f557365726e616d653a202573000000000000000000000000000000000000000081525085612060565b610a756040518060400160405280600a81526020017f5461726765743a2025640000000000000000000000000000000000000000000081525086611e61565b610ab46040518060400160405280600e81526020017f537461727420446174653a20256400000000000000000000000000000000000081525084611e61565b610af36040518060400160405280600c81526020017f456e6420446174653a202564000000000000000000000000000000000000000081525083611e61565b610b326040518060400160405280600881526020017f676f616c3a20257300000000000000000000000000000000000000000000000081525087612060565b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006040518060e001604052808881526020018581526020018481526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815260200134815260200160001515815250905080600f60008481526020019081526020016000206000820151816000019080519060200190610bf69291906129e0565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050507fd7385c5e159a93070ed4c329b34fd6609ea6f7c60a06232e24681d57828cf8da81604051610cb891906136b6565b60405180910390a150505050505050565b60106020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b60116020528060005260406000206000915090505481565b600d6020528160005260406000208181548110610d2e57600080fd5b90600052602060002001600091509150505481565b826006600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc9061365b565b60405180910390fd5b6006600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2610e866040518060400160405280601581526020017f667566696c6c656420676f616c207265717565737400000000000000000000008152506120fc565b6000600f60008681526020019081526020016000206040518060e0016040529081600082018054610eb690613c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee290613c22565b8015610f2f5780601f10610f0457610100808354040283529160200191610f2f565b820191906000526020600020905b815481529060010190602001808311610f1257829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050905060018160c0019015159081151581525050610fee600a612195565b6000610ffa600a6121ab565b90506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050808290806001815401808255809150506001900390600052602060002001600090919091909150558260a00151601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ba91906138d7565b92505081905550600060405180610180016040528084815260200187815260200185600001518152602001888152602001856060015181526020018560200151815260200185604001518152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a00151815260200160001515815260200160001515815260200160001515815250905080600c6000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906111929291906129e0565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061010082015181600801556101208201518160090160006101000a81548160ff0219169083151502179055506101408201518160090160016101000a81548160ff0219169083151502179055506101608201518160090160026101000a81548160ff0219169083151502179055509050507fad8e750e3b6e40e6b6de3cca44b644f7896757aa26c9aca221cfac71e3218879816040516112a291906136d8565b60405180910390a15050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806112f1600854306378cb58e360e01b611efd565b905061133d6040518060400160405280600881526020017f757365726e616d650000000000000000000000000000000000000000000000008152508483611f2e9092919063ffffffff16565b6113bc6040518060400160405280600681526020017f6d6574686f6400000000000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f6c61746573745f74776565745f7473000000000000000000000000000000000081525083611f2e9092919063ffffffff16565b6114156040518060400160405280600681526020017f75736572696400000000000000000000000000000000000000000000000000008152506040518060200160405280600081525083611f2e9092919063ffffffff16565b61146e6040518060400160405280600781526020017f756e69785f7473000000000000000000000000000000000000000000000000008152506040518060200160405280600081525083611f2e9092919063ffffffff16565b600061149e600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000611f94565b90508092505050919050565b600a8060000154905081565b600f6020528060005260406000206000915090508060000180546114d990613c22565b80601f016020809104026020016040519081016040528092919081815260200182805461150590613c22565b80156115525780601f1061152757610100808354040283529160200191611552565b820191906000526020600020905b81548152906001019060200180831161153557829003601f168201915b5050505050908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b6115b5612963565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561164057602002820191906000526020600020905b81548152602001906001019080831161162c575b50505050509050600c6000826001845161165a9190613af8565b8151811061166b5761166a613dba565b5b602002602001015181526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820180546116b190613c22565b80601f01602080910402602001604051908101604052809291908181526020018280546116dd90613c22565b801561172a5780601f106116ff5761010080835404028352916020019161172a565b820191906000526020600020905b81548152906001019060200180831161170d57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff161515151581526020016009820160029054906101000a900460ff161515151581525050915050919050565b600e6020528060005260406000206000915090505481565b6000600c600083815260200190815260200160002060405180610180016040529081600082015481526020016001820154815260200160028201805461187190613c22565b80601f016020809104026020016040519081016040528092919081815260200182805461189d90613c22565b80156118ea5780601f106118bf576101008083540402835291602001916118ea565b820191906000526020600020905b8154815290600101906020018083116118cd57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff161515151581526020016009820160029054906101000a900460ff1615151515815250509050428160c001511115611a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0c9061363b565b60405180910390fd5b6000611a2982602001518360a00151610805565b90506000604051806040016040528085815260200160001515815250905080601060008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050507f07797bdd10b34f8dc42d1e247a7d17ac0b75bf8eb8654afdc6aee7dc067a5e4a81604051611ab7919061369b565b60405180910390a150505050565b826006600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e9061365b565b60405180910390fd5b6006600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2600060106000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff16151515158152505090506000600c60008360000151815260200190815260200160002090506000816003015486611c3e9190613af8565b905060008260040154821015905080611c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c839061367b565b60405180910390fd5b5050505050505050565b600c602052806000526040600020600091509050806000015490806001015490806002018054611cc590613c22565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf190613c22565b8015611d3e5780601f10611d1357610100808354040283529160200191611d3e565b820191906000526020600020905b815481529060010190602001808311611d2157829003601f168201915b5050505050908060030154908060040154908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080154908060090160009054906101000a900460ff16908060090160019054906101000a900460ff16908060090160029054906101000a900460ff1690508c565b611e5d8282604051602401611ddb92919061350e565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b5050565b611ef98282604051602401611e77929190613575565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b5050565b611f05612a66565b611f0d612a66565b611f24858585846121e2909392919063ffffffff16565b9150509392505050565b611f4582846080015161229290919063ffffffff16565b611f5c81846080015161229290919063ffffffff16565b505050565b611f7882846080015161229290919063ffffffff16565b611f8f8184608001516122b790919063ffffffff16565b505050565b6000806005549050600181611fa991906138d7565b6005819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401611fea9897969594939291906133d1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612055868386846122e7565b925050509392505050565b6120f8828260405160240161207692919061353e565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b5050565b6121928160405160240161211091906134ec565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6121ea612a66565b6121fa856080015161010061248b565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61229f82600383516124f5565b6122b2818361267a90919063ffffffff16565b505050565b67ffffffffffffffff8111156122d6576122d1828261269c565b6122e3565b6122e2826000836124f5565b5b5050565b600030846040516020016122fc92919061338a565b604051602081830303815290604052805190602001209050846006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016123f293929190613456565b602060405180830381600087803b15801561240c57600080fd5b505af1158015612420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124449190612c3b565b612483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247a9061361b565b60405180910390fd5b949350505050565b612493612ad3565b60006020836124a29190613cfc565b146124ce576020826124b49190613cfc565b60206124c09190613af8565b826124cb91906138d7565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff161161252c576125268160058460ff16901b60ff1617846126e890919063ffffffff16565b50612675565b60ff8167ffffffffffffffff16116125825761255b601860058460ff16901b17846126e890919063ffffffff16565b5061257c8167ffffffffffffffff166001856127089092919063ffffffff16565b50612674565b61ffff8167ffffffffffffffff16116125d9576125b2601960058460ff16901b17846126e890919063ffffffff16565b506125d38167ffffffffffffffff166002856127089092919063ffffffff16565b50612673565b63ffffffff8167ffffffffffffffff16116126325761260b601a60058460ff16901b17846126e890919063ffffffff16565b5061262c8167ffffffffffffffff166004856127089092919063ffffffff16565b50612672565b61264f601b60058460ff16901b17846126e890919063ffffffff16565b506126708167ffffffffffffffff166008856127089092919063ffffffff16565b505b5b5b5b505050565b612682612ad3565b6126948384600001515184855161272a565b905092915050565b6126ba60026005600660ff16901b17836126e890919063ffffffff16565b506126e482826040516020016126d091906136fa565b604051602081830303815290604052612819565b5050565b6126f0612ad3565b612700838460000151518461283e565b905092915050565b612710612ad3565b612721848560000151518585612895565b90509392505050565b612732612ad3565b825182111561274057600080fd5b8460200151828561275191906138d7565b1115612786576127858560026127768860200151888761277191906138d7565b612923565b6127809190613a9e565b61293f565b5b6000808651805187602083010193508088870111156127a55787860182525b60208701925050505b602084106127ec57805182526020826127c791906138d7565b91506020816127d691906138d7565b90506020846127e59190613af8565b93506127ae565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61282682600283516124f5565b612839818361267a90919063ffffffff16565b505050565b612846612ad3565b8360200151831061286c5761286b84600286602001516128669190613a9e565b61293f565b5b8351805160208583010184815381861415612888576001820183525b5050508390509392505050565b61289d612ad3565b846020015184836128ae91906138d7565b11156128d6576128d585600286856128c691906138d7565b6128d09190613a9e565b61293f565b5b60006001836101006128e89190613980565b6128f29190613af8565b905085518386820101858319825116178152815185880111156129155784870182525b505085915050949350505050565b60008183111561293557829050612939565b8190505b92915050565b600082600001519050612952838361248b565b5061295d838261267a565b50505050565b60405180610180016040528060008152602001600081526020016060815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581526020016000151581525090565b8280546129ec90613c22565b90600052602060002090601f016020900481019282612a0e5760008555612a55565b82601f10612a2757805160ff1916838001178555612a55565b82800160010185558215612a55579182015b82811115612a54578251825591602001919060010190612a39565b5b509050612a629190612aed565b5090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001612acd612ad3565b81525090565b604051806040016040528060608152602001600081525090565b5b80821115612b06576000816000905550600101612aee565b5090565b6000612b1d612b1884613824565b6137ff565b905082815260208101848484011115612b3957612b38613e1d565b5b612b44848285613be0565b509392505050565b600081359050612b5b81613f47565b92915050565b600081519050612b7081613f5e565b92915050565b600081359050612b8581613f75565b92915050565b600082601f830112612ba057612b9f613e18565b5b8135612bb0848260208601612b0a565b91505092915050565b600081359050612bc881613f8c565b92915050565b600060208284031215612be457612be3613e27565b5b6000612bf284828501612b4c565b91505092915050565b60008060408385031215612c1257612c11613e27565b5b6000612c2085828601612b4c565b9250506020612c3185828601612bb9565b9150509250929050565b600060208284031215612c5157612c50613e27565b5b6000612c5f84828501612b61565b91505092915050565b600060208284031215612c7e57612c7d613e27565b5b6000612c8c84828501612b76565b91505092915050565b600080600060608486031215612cae57612cad613e27565b5b6000612cbc86828701612b76565b9350506020612ccd86828701612bb9565b9250506040612cde86828701612bb9565b9150509250925092565b600060208284031215612cfe57612cfd613e27565b5b600082013567ffffffffffffffff811115612d1c57612d1b613e22565b5b612d2884828501612b8b565b91505092915050565b600080600080600060a08688031215612d4d57612d4c613e27565b5b600086013567ffffffffffffffff811115612d6b57612d6a613e22565b5b612d7788828901612b8b565b9550506020612d8888828901612bb9565b945050604086013567ffffffffffffffff811115612da957612da8613e22565b5b612db588828901612b8b565b9350506060612dc688828901612bb9565b9250506080612dd788828901612bb9565b9150509295509295909350565b600060208284031215612dfa57612df9613e27565b5b6000612e0884828501612bb9565b91505092915050565b60008060408385031215612e2857612e27613e27565b5b6000612e3685828601612bb9565b9250506020612e4785828601612bb9565b9150509250929050565b6000612e5d838361314d565b905092915050565b612e6e81613b2c565b82525050565b612e7d81613b2c565b82525050565b6000612e8e82613865565b612e988185613893565b935083602082028501612eaa85613855565b8060005b85811015612ee65784840389528151612ec78582612e51565b9450612ed283613886565b925060208a01995050600181019050612eae565b50829750879550505050505092915050565b612f0181613b3e565b82525050565b612f1081613b3e565b82525050565b612f1f81613b4a565b82525050565b612f2e81613b54565b82525050565b6000612f3f82613870565b612f4981856138a4565b9350612f59818560208601613bef565b612f6281613e2c565b840191505092915050565b612f7e612f7982613baa565b613cce565b82525050565b6000612f8f8261387b565b612f9981856138b5565b9350612fa9818560208601613bef565b612fb281613e2c565b840191505092915050565b6000612fc88261387b565b612fd281856138c6565b9350612fe2818560208601613bef565b612feb81613e2c565b840191505092915050565b60006130036023836138c6565b915061300e82613e57565b604082019050919050565b6000613026601f836138c6565b915061303182613ea6565b602082019050919050565b60006130496028836138c6565b915061305482613ecf565b604082019050919050565b600061306c601b836138c6565b915061307782613f1e565b602082019050919050565b6040820160008201516130986000850182613355565b5060208201516130ab6020850182612ef8565b50505050565b600060e08301600083015184820360008601526130ce8282612f84565b91505060208301516130e36020860182613355565b5060408301516130f66040860182613355565b5060608301516131096060860182613355565b50608083015161311c6080860182612e65565b5060a083015161312f60a0860182613355565b5060c083015161314260c0860182612ef8565b508091505092915050565b6000610180830160008301516131666000860182613355565b5060208301516131796020860182613355565b50604083015184820360408601526131918282612f84565b91505060608301516131a66060860182613355565b5060808301516131b96080860182613355565b5060a08301516131cc60a0860182613355565b5060c08301516131df60c0860182613355565b5060e08301516131f260e0860182612e65565b50610100830151613207610100860182613355565b5061012083015161321c610120860182612ef8565b50610140830151613231610140860182612ef8565b50610160830151613246610160860182612ef8565b508091505092915050565b60006101808301600083015161326a6000860182613355565b50602083015161327d6020860182613355565b50604083015184820360408601526132958282612f84565b91505060608301516132aa6060860182613355565b5060808301516132bd6080860182613355565b5060a08301516132d060a0860182613355565b5060c08301516132e360c0860182613355565b5060e08301516132f660e0860182612e65565b5061010083015161330b610100860182613355565b50610120830151613320610120860182612ef8565b50610140830151613335610140860182612ef8565b5061016083015161334a610160860182612ef8565b508091505092915050565b61335e81613ba0565b82525050565b61336d81613ba0565b82525050565b61338461337f82613ba0565b613cf2565b82525050565b60006133968285612f6d565b6014820191506133a68284613373565b6020820191508190509392505050565b60006020820190506133cb6000830184612e74565b92915050565b6000610100820190506133e7600083018b612e74565b6133f4602083018a613364565b6134016040830189612f16565b61340e6060830188612e74565b61341b6080830187612f25565b61342860a0830186613364565b61343560c0830185613364565b81810360e08301526134478184612f34565b90509998505050505050505050565b600060608201905061346b6000830186612e74565b6134786020830185613364565b818103604083015261348a8184612f34565b9050949350505050565b600060208201905081810360008301526134ae8184612e83565b905092915050565b60006020820190506134cb6000830184612f07565b92915050565b60006020820190506134e66000830184612f16565b92915050565b600060208201905081810360008301526135068184612fbd565b905092915050565b600060408201905081810360008301526135288185612fbd565b90506135376020830184612e74565b9392505050565b600060408201905081810360008301526135588185612fbd565b9050818103602083015261356c8184612fbd565b90509392505050565b6000604082019050818103600083015261358f8185612fbd565b905061359e6020830184613364565b9392505050565b600060e08201905081810360008301526135bf818a612fbd565b90506135ce6020830189613364565b6135db6040830188613364565b6135e86060830187613364565b6135f56080830186612e74565b61360260a0830185613364565b61360f60c0830184612f07565b98975050505050505050565b6000602082019050818103600083015261363481612ff6565b9050919050565b6000602082019050818103600083015261365481613019565b9050919050565b600060208201905081810360008301526136748161303c565b9050919050565b600060208201905081810360008301526136948161305f565b9050919050565b60006040820190506136b06000830184613082565b92915050565b600060208201905081810360008301526136d081846130b1565b905092915050565b600060208201905081810360008301526136f28184613251565b905092915050565b600060208201905061370f6000830184613364565b92915050565b600060408201905061372a6000830185613364565b6137376020830184612f07565b9392505050565b600061018082019050613754600083018f613364565b613761602083018e613364565b8181036040830152613773818d612fbd565b9050613782606083018c613364565b61378f608083018b613364565b61379c60a083018a613364565b6137a960c0830189613364565b6137b660e0830188612e74565b6137c4610100830187613364565b6137d2610120830186612f07565b6137e0610140830185612f07565b6137ee610160830184612f07565b9d9c50505050505050505050505050565b600061380961381a565b90506138158282613c54565b919050565b6000604051905090565b600067ffffffffffffffff82111561383f5761383e613de9565b5b61384882613e2c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006138e282613ba0565b91506138ed83613ba0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561392257613921613d2d565b5b828201905092915050565b6000808291508390505b60018511156139775780860481111561395357613952613d2d565b5b60018516156139625780820291505b808102905061397085613e4a565b9450613937565b94509492505050565b600061398b82613ba0565b915061399683613ba0565b92506139c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846139cb565b905092915050565b6000826139db5760019050613a97565b816139e95760009050613a97565b81600181146139ff5760028114613a0957613a38565b6001915050613a97565b60ff841115613a1b57613a1a613d2d565b5b8360020a915084821115613a3257613a31613d2d565b5b50613a97565b5060208310610133831016604e8410600b8410161715613a6d5782820a905083811115613a6857613a67613d2d565b5b613a97565b613a7a848484600161392d565b92509050818404811115613a9157613a90613d2d565b5b81810290505b9392505050565b6000613aa982613ba0565b9150613ab483613ba0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613aed57613aec613d2d565b5b828202905092915050565b6000613b0382613ba0565b9150613b0e83613ba0565b925082821015613b2157613b20613d2d565b5b828203905092915050565b6000613b3782613b80565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613bb582613bbc565b9050919050565b6000613bc782613bce565b9050919050565b6000613bd982613b80565b9050919050565b82818337600083830152505050565b60005b83811015613c0d578082015181840152602081019050613bf2565b83811115613c1c576000848401525b50505050565b60006002820490506001821680613c3a57607f821691505b60208210811415613c4e57613c4d613d8b565b5b50919050565b613c5d82613e2c565b810181811067ffffffffffffffff82111715613c7c57613c7b613de9565b5b80604052505050565b6000613c9082613ba0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cc357613cc2613d2d565b5b600182019050919050565b6000613cd982613ce0565b9050919050565b6000613ceb82613e3d565b9050919050565b6000819050919050565b6000613d0782613ba0565b9150613d1283613ba0565b925082613d2257613d21613d5c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b7f596f7572206368616c6c656e6765206973206e6f74206f766572207965742100600082015250565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b7f596f7520646964206e6f7420726561636820796f757220676f616c0000000000600082015250565b613f5081613b2c565b8114613f5b57600080fd5b50565b613f6781613b3e565b8114613f7257600080fd5b50565b613f7e81613b4a565b8114613f8957600080fd5b50565b613f9581613ba0565b8114613fa057600080fd5b5056fe52657175657374696e67206c696b65732073696e63652074696d657374616d703a202564a2646970667358221220b2e5f54f9ec8feed0c3dd24216acd68d3b3b793a4ba9b03f679f608a4219f8cf64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c80637dc0d1d011610095578063c1ea96d611610064578063c1ea96d6146103cb578063e18df9fa14610408578063e56e25f514610445578063ef7dfa1d1461046e578063fc1f22e51461049757610114565b80637dc0d1d0146102f5578063aedf0a4a14610320578063b9fa2c6b1461035d578063beb3e4281461038857610114565b8063442f1e91116100dc578063442f1e91146101f85780634ddd147a1461021457806356b18b3214610252578063605ad2f91461028f57806378cb58e3146102cc57610114565b80630a00663714610116578063320936931461015357806335742c631461017e5780633dd445cf146101bb57610114565b3661011457005b005b34801561012257600080fd5b5061013d60048036038101906101389190612c68565b6104df565b60405161014a91906134b6565b60405180910390f35b34801561015f57600080fd5b5061016861050c565b60405161017591906136fa565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190612bce565b610518565b6040516101b29190613494565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd9190612e11565b610805565b6040516101ef91906134d1565b60405180910390f35b610212600480360381019061020d9190612d31565b6109ea565b005b34801561022057600080fd5b5061023b60048036038101906102369190612c68565b610cc9565b604051610249929190613715565b60405180910390f35b34801561025e57600080fd5b5061027960048036038101906102749190612bce565b610cfa565b60405161028691906136fa565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190612bfb565b610d12565b6040516102c391906136fa565b60405180910390f35b3480156102d857600080fd5b506102f360048036038101906102ee9190612c95565b610d43565b005b34801561030157600080fd5b5061030a6112b4565b60405161031791906133b6565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190612ce8565b6112da565b60405161035491906134d1565b60405180910390f35b34801561036957600080fd5b506103726114aa565b60405161037f91906136fa565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190612c68565b6114b6565b6040516103c297969594939291906135a5565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190612bce565b6115ad565b6040516103ff91906136d8565b60405180910390f35b34801561041457600080fd5b5061042f600480360381019061042a9190612bce565b611814565b60405161043c91906134d1565b60405180910390f35b34801561045157600080fd5b5061046c60048036038101906104679190612de4565b61182c565b005b34801561047a57600080fd5b5061049560048036038101906104909190612c95565b611ac5565b005b3480156104a357600080fd5b506104be60048036038101906104b99190612de4565b611c96565b6040516104d69c9b9a9998979695949392919061373e565b60405180910390f35b6000600f600083815260200190815260200160002060060160009054906101000a900460ff169050919050565b600b8060000154905081565b60606000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156105a557602002820191906000526020600020905b815481526020019060010190808311610591575b505050505090506000815167ffffffffffffffff8111156105c9576105c8613de9565b5b60405190808252806020026020018201604052801561060257816020015b6105ef612963565b8152602001906001900390816105e75790505b50905060005b82518110156107fa57600c600084838151811061062857610627613dba565b5b6020026020010151815260200190815260200160002060405180610180016040529081600082015481526020016001820154815260200160028201805461066e90613c22565b80601f016020809104026020016040519081016040528092919081815260200182805461069a90613c22565b80156106e75780601f106106bc576101008083540402835291602001916106e7565b820191906000526020600020905b8154815290600101906020018083116106ca57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff161515151581526020016009820160029054906101000a900460ff1615151515815250508282815181106107dc576107db613dba565b5b602002602001018190525080806107f290613c85565b915050610608565b508092505050919050565b6000610829604051806060016040528060248152602001613fa46024913983611e61565b600061083f6008543063ef7dfa1d60e01b611efd565b905061089a6040518060400160405280600881526020017f757365726e616d650000000000000000000000000000000000000000000000008152506040518060200160405280600081525083611f2e9092919063ffffffff16565b6109196040518060400160405280600681526020017f6d6574686f6400000000000000000000000000000000000000000000000000008152506040518060400160405280600e81526020017f6c696b65735f73696e63655f747300000000000000000000000000000000000081525083611f2e9092919063ffffffff16565b6109636040518060400160405280600681526020017f75736572696400000000000000000000000000000000000000000000000000008152508583611f619092919063ffffffff16565b6109ad6040518060400160405280600781526020017f756e69785f7473000000000000000000000000000000000000000000000000008152508483611f619092919063ffffffff16565b60006109dd600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000611f94565b9050809250505092915050565b60006109f5846112da565b9050610a366040518060400160405280600c81526020017f557365726e616d653a202573000000000000000000000000000000000000000081525085612060565b610a756040518060400160405280600a81526020017f5461726765743a2025640000000000000000000000000000000000000000000081525086611e61565b610ab46040518060400160405280600e81526020017f537461727420446174653a20256400000000000000000000000000000000000081525084611e61565b610af36040518060400160405280600c81526020017f456e6420446174653a202564000000000000000000000000000000000000000081525083611e61565b610b326040518060400160405280600881526020017f676f616c3a20257300000000000000000000000000000000000000000000000081525087612060565b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006040518060e001604052808881526020018581526020018481526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815260200134815260200160001515815250905080600f60008481526020019081526020016000206000820151816000019080519060200190610bf69291906129e0565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050507fd7385c5e159a93070ed4c329b34fd6609ea6f7c60a06232e24681d57828cf8da81604051610cb891906136b6565b60405180910390a150505050505050565b60106020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b60116020528060005260406000206000915090505481565b600d6020528160005260406000208181548110610d2e57600080fd5b90600052602060002001600091509150505481565b826006600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc9061365b565b60405180910390fd5b6006600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2610e866040518060400160405280601581526020017f667566696c6c656420676f616c207265717565737400000000000000000000008152506120fc565b6000600f60008681526020019081526020016000206040518060e0016040529081600082018054610eb690613c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee290613c22565b8015610f2f5780601f10610f0457610100808354040283529160200191610f2f565b820191906000526020600020905b815481529060010190602001808311610f1257829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050905060018160c0019015159081151581525050610fee600a612195565b6000610ffa600a6121ab565b90506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050808290806001815401808255809150506001900390600052602060002001600090919091909150558260a00151601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ba91906138d7565b92505081905550600060405180610180016040528084815260200187815260200185600001518152602001888152602001856060015181526020018560200151815260200185604001518152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a00151815260200160001515815260200160001515815260200160001515815250905080600c6000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906111929291906129e0565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061010082015181600801556101208201518160090160006101000a81548160ff0219169083151502179055506101408201518160090160016101000a81548160ff0219169083151502179055506101608201518160090160026101000a81548160ff0219169083151502179055509050507fad8e750e3b6e40e6b6de3cca44b644f7896757aa26c9aca221cfac71e3218879816040516112a291906136d8565b60405180910390a15050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806112f1600854306378cb58e360e01b611efd565b905061133d6040518060400160405280600881526020017f757365726e616d650000000000000000000000000000000000000000000000008152508483611f2e9092919063ffffffff16565b6113bc6040518060400160405280600681526020017f6d6574686f6400000000000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f6c61746573745f74776565745f7473000000000000000000000000000000000081525083611f2e9092919063ffffffff16565b6114156040518060400160405280600681526020017f75736572696400000000000000000000000000000000000000000000000000008152506040518060200160405280600081525083611f2e9092919063ffffffff16565b61146e6040518060400160405280600781526020017f756e69785f7473000000000000000000000000000000000000000000000000008152506040518060200160405280600081525083611f2e9092919063ffffffff16565b600061149e600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000611f94565b90508092505050919050565b600a8060000154905081565b600f6020528060005260406000206000915090508060000180546114d990613c22565b80601f016020809104026020016040519081016040528092919081815260200182805461150590613c22565b80156115525780601f1061152757610100808354040283529160200191611552565b820191906000526020600020905b81548152906001019060200180831161153557829003601f168201915b5050505050908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060160009054906101000a900460ff16905087565b6115b5612963565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561164057602002820191906000526020600020905b81548152602001906001019080831161162c575b50505050509050600c6000826001845161165a9190613af8565b8151811061166b5761166a613dba565b5b602002602001015181526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820180546116b190613c22565b80601f01602080910402602001604051908101604052809291908181526020018280546116dd90613c22565b801561172a5780601f106116ff5761010080835404028352916020019161172a565b820191906000526020600020905b81548152906001019060200180831161170d57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff161515151581526020016009820160029054906101000a900460ff161515151581525050915050919050565b600e6020528060005260406000206000915090505481565b6000600c600083815260200190815260200160002060405180610180016040529081600082015481526020016001820154815260200160028201805461187190613c22565b80601f016020809104026020016040519081016040528092919081815260200182805461189d90613c22565b80156118ea5780601f106118bf576101008083540402835291602001916118ea565b820191906000526020600020905b8154815290600101906020018083116118cd57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff161515151581526020016009820160029054906101000a900460ff1615151515815250509050428160c001511115611a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0c9061363b565b60405180910390fd5b6000611a2982602001518360a00151610805565b90506000604051806040016040528085815260200160001515815250905080601060008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050507f07797bdd10b34f8dc42d1e247a7d17ac0b75bf8eb8654afdc6aee7dc067a5e4a81604051611ab7919061369b565b60405180910390a150505050565b826006600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e9061365b565b60405180910390fd5b6006600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2600060106000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff16151515158152505090506000600c60008360000151815260200190815260200160002090506000816003015486611c3e9190613af8565b905060008260040154821015905080611c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c839061367b565b60405180910390fd5b5050505050505050565b600c602052806000526040600020600091509050806000015490806001015490806002018054611cc590613c22565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf190613c22565b8015611d3e5780601f10611d1357610100808354040283529160200191611d3e565b820191906000526020600020905b815481529060010190602001808311611d2157829003601f168201915b5050505050908060030154908060040154908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080154908060090160009054906101000a900460ff16908060090160019054906101000a900460ff16908060090160029054906101000a900460ff1690508c565b611e5d8282604051602401611ddb92919061350e565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b5050565b611ef98282604051602401611e77929190613575565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b5050565b611f05612a66565b611f0d612a66565b611f24858585846121e2909392919063ffffffff16565b9150509392505050565b611f4582846080015161229290919063ffffffff16565b611f5c81846080015161229290919063ffffffff16565b505050565b611f7882846080015161229290919063ffffffff16565b611f8f8184608001516122b790919063ffffffff16565b505050565b6000806005549050600181611fa991906138d7565b6005819055506000634042994660e01b60008087600001513089604001518760018c6080015160000151604051602401611fea9897969594939291906133d1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050612055868386846122e7565b925050509392505050565b6120f8828260405160240161207692919061353e565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b5050565b6121928160405160240161211091906134ec565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121b9565b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6121ea612a66565b6121fa856080015161010061248b565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61229f82600383516124f5565b6122b2818361267a90919063ffffffff16565b505050565b67ffffffffffffffff8111156122d6576122d1828261269c565b6122e3565b6122e2826000836124f5565b5b5050565b600030846040516020016122fc92919061338a565b604051602081830303815290604052805190602001209050846006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016123f293929190613456565b602060405180830381600087803b15801561240c57600080fd5b505af1158015612420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124449190612c3b565b612483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247a9061361b565b60405180910390fd5b949350505050565b612493612ad3565b60006020836124a29190613cfc565b146124ce576020826124b49190613cfc565b60206124c09190613af8565b826124cb91906138d7565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff161161252c576125268160058460ff16901b60ff1617846126e890919063ffffffff16565b50612675565b60ff8167ffffffffffffffff16116125825761255b601860058460ff16901b17846126e890919063ffffffff16565b5061257c8167ffffffffffffffff166001856127089092919063ffffffff16565b50612674565b61ffff8167ffffffffffffffff16116125d9576125b2601960058460ff16901b17846126e890919063ffffffff16565b506125d38167ffffffffffffffff166002856127089092919063ffffffff16565b50612673565b63ffffffff8167ffffffffffffffff16116126325761260b601a60058460ff16901b17846126e890919063ffffffff16565b5061262c8167ffffffffffffffff166004856127089092919063ffffffff16565b50612672565b61264f601b60058460ff16901b17846126e890919063ffffffff16565b506126708167ffffffffffffffff166008856127089092919063ffffffff16565b505b5b5b5b505050565b612682612ad3565b6126948384600001515184855161272a565b905092915050565b6126ba60026005600660ff16901b17836126e890919063ffffffff16565b506126e482826040516020016126d091906136fa565b604051602081830303815290604052612819565b5050565b6126f0612ad3565b612700838460000151518461283e565b905092915050565b612710612ad3565b612721848560000151518585612895565b90509392505050565b612732612ad3565b825182111561274057600080fd5b8460200151828561275191906138d7565b1115612786576127858560026127768860200151888761277191906138d7565b612923565b6127809190613a9e565b61293f565b5b6000808651805187602083010193508088870111156127a55787860182525b60208701925050505b602084106127ec57805182526020826127c791906138d7565b91506020816127d691906138d7565b90506020846127e59190613af8565b93506127ae565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61282682600283516124f5565b612839818361267a90919063ffffffff16565b505050565b612846612ad3565b8360200151831061286c5761286b84600286602001516128669190613a9e565b61293f565b5b8351805160208583010184815381861415612888576001820183525b5050508390509392505050565b61289d612ad3565b846020015184836128ae91906138d7565b11156128d6576128d585600286856128c691906138d7565b6128d09190613a9e565b61293f565b5b60006001836101006128e89190613980565b6128f29190613af8565b905085518386820101858319825116178152815185880111156129155784870182525b505085915050949350505050565b60008183111561293557829050612939565b8190505b92915050565b600082600001519050612952838361248b565b5061295d838261267a565b50505050565b60405180610180016040528060008152602001600081526020016060815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581526020016000151581525090565b8280546129ec90613c22565b90600052602060002090601f016020900481019282612a0e5760008555612a55565b82601f10612a2757805160ff1916838001178555612a55565b82800160010185558215612a55579182015b82811115612a54578251825591602001919060010190612a39565b5b509050612a629190612aed565b5090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001612acd612ad3565b81525090565b604051806040016040528060608152602001600081525090565b5b80821115612b06576000816000905550600101612aee565b5090565b6000612b1d612b1884613824565b6137ff565b905082815260208101848484011115612b3957612b38613e1d565b5b612b44848285613be0565b509392505050565b600081359050612b5b81613f47565b92915050565b600081519050612b7081613f5e565b92915050565b600081359050612b8581613f75565b92915050565b600082601f830112612ba057612b9f613e18565b5b8135612bb0848260208601612b0a565b91505092915050565b600081359050612bc881613f8c565b92915050565b600060208284031215612be457612be3613e27565b5b6000612bf284828501612b4c565b91505092915050565b60008060408385031215612c1257612c11613e27565b5b6000612c2085828601612b4c565b9250506020612c3185828601612bb9565b9150509250929050565b600060208284031215612c5157612c50613e27565b5b6000612c5f84828501612b61565b91505092915050565b600060208284031215612c7e57612c7d613e27565b5b6000612c8c84828501612b76565b91505092915050565b600080600060608486031215612cae57612cad613e27565b5b6000612cbc86828701612b76565b9350506020612ccd86828701612bb9565b9250506040612cde86828701612bb9565b9150509250925092565b600060208284031215612cfe57612cfd613e27565b5b600082013567ffffffffffffffff811115612d1c57612d1b613e22565b5b612d2884828501612b8b565b91505092915050565b600080600080600060a08688031215612d4d57612d4c613e27565b5b600086013567ffffffffffffffff811115612d6b57612d6a613e22565b5b612d7788828901612b8b565b9550506020612d8888828901612bb9565b945050604086013567ffffffffffffffff811115612da957612da8613e22565b5b612db588828901612b8b565b9350506060612dc688828901612bb9565b9250506080612dd788828901612bb9565b9150509295509295909350565b600060208284031215612dfa57612df9613e27565b5b6000612e0884828501612bb9565b91505092915050565b60008060408385031215612e2857612e27613e27565b5b6000612e3685828601612bb9565b9250506020612e4785828601612bb9565b9150509250929050565b6000612e5d838361314d565b905092915050565b612e6e81613b2c565b82525050565b612e7d81613b2c565b82525050565b6000612e8e82613865565b612e988185613893565b935083602082028501612eaa85613855565b8060005b85811015612ee65784840389528151612ec78582612e51565b9450612ed283613886565b925060208a01995050600181019050612eae565b50829750879550505050505092915050565b612f0181613b3e565b82525050565b612f1081613b3e565b82525050565b612f1f81613b4a565b82525050565b612f2e81613b54565b82525050565b6000612f3f82613870565b612f4981856138a4565b9350612f59818560208601613bef565b612f6281613e2c565b840191505092915050565b612f7e612f7982613baa565b613cce565b82525050565b6000612f8f8261387b565b612f9981856138b5565b9350612fa9818560208601613bef565b612fb281613e2c565b840191505092915050565b6000612fc88261387b565b612fd281856138c6565b9350612fe2818560208601613bef565b612feb81613e2c565b840191505092915050565b60006130036023836138c6565b915061300e82613e57565b604082019050919050565b6000613026601f836138c6565b915061303182613ea6565b602082019050919050565b60006130496028836138c6565b915061305482613ecf565b604082019050919050565b600061306c601b836138c6565b915061307782613f1e565b602082019050919050565b6040820160008201516130986000850182613355565b5060208201516130ab6020850182612ef8565b50505050565b600060e08301600083015184820360008601526130ce8282612f84565b91505060208301516130e36020860182613355565b5060408301516130f66040860182613355565b5060608301516131096060860182613355565b50608083015161311c6080860182612e65565b5060a083015161312f60a0860182613355565b5060c083015161314260c0860182612ef8565b508091505092915050565b6000610180830160008301516131666000860182613355565b5060208301516131796020860182613355565b50604083015184820360408601526131918282612f84565b91505060608301516131a66060860182613355565b5060808301516131b96080860182613355565b5060a08301516131cc60a0860182613355565b5060c08301516131df60c0860182613355565b5060e08301516131f260e0860182612e65565b50610100830151613207610100860182613355565b5061012083015161321c610120860182612ef8565b50610140830151613231610140860182612ef8565b50610160830151613246610160860182612ef8565b508091505092915050565b60006101808301600083015161326a6000860182613355565b50602083015161327d6020860182613355565b50604083015184820360408601526132958282612f84565b91505060608301516132aa6060860182613355565b5060808301516132bd6080860182613355565b5060a08301516132d060a0860182613355565b5060c08301516132e360c0860182613355565b5060e08301516132f660e0860182612e65565b5061010083015161330b610100860182613355565b50610120830151613320610120860182612ef8565b50610140830151613335610140860182612ef8565b5061016083015161334a610160860182612ef8565b508091505092915050565b61335e81613ba0565b82525050565b61336d81613ba0565b82525050565b61338461337f82613ba0565b613cf2565b82525050565b60006133968285612f6d565b6014820191506133a68284613373565b6020820191508190509392505050565b60006020820190506133cb6000830184612e74565b92915050565b6000610100820190506133e7600083018b612e74565b6133f4602083018a613364565b6134016040830189612f16565b61340e6060830188612e74565b61341b6080830187612f25565b61342860a0830186613364565b61343560c0830185613364565b81810360e08301526134478184612f34565b90509998505050505050505050565b600060608201905061346b6000830186612e74565b6134786020830185613364565b818103604083015261348a8184612f34565b9050949350505050565b600060208201905081810360008301526134ae8184612e83565b905092915050565b60006020820190506134cb6000830184612f07565b92915050565b60006020820190506134e66000830184612f16565b92915050565b600060208201905081810360008301526135068184612fbd565b905092915050565b600060408201905081810360008301526135288185612fbd565b90506135376020830184612e74565b9392505050565b600060408201905081810360008301526135588185612fbd565b9050818103602083015261356c8184612fbd565b90509392505050565b6000604082019050818103600083015261358f8185612fbd565b905061359e6020830184613364565b9392505050565b600060e08201905081810360008301526135bf818a612fbd565b90506135ce6020830189613364565b6135db6040830188613364565b6135e86060830187613364565b6135f56080830186612e74565b61360260a0830185613364565b61360f60c0830184612f07565b98975050505050505050565b6000602082019050818103600083015261363481612ff6565b9050919050565b6000602082019050818103600083015261365481613019565b9050919050565b600060208201905081810360008301526136748161303c565b9050919050565b600060208201905081810360008301526136948161305f565b9050919050565b60006040820190506136b06000830184613082565b92915050565b600060208201905081810360008301526136d081846130b1565b905092915050565b600060208201905081810360008301526136f28184613251565b905092915050565b600060208201905061370f6000830184613364565b92915050565b600060408201905061372a6000830185613364565b6137376020830184612f07565b9392505050565b600061018082019050613754600083018f613364565b613761602083018e613364565b8181036040830152613773818d612fbd565b9050613782606083018c613364565b61378f608083018b613364565b61379c60a083018a613364565b6137a960c0830189613364565b6137b660e0830188612e74565b6137c4610100830187613364565b6137d2610120830186612f07565b6137e0610140830185612f07565b6137ee610160830184612f07565b9d9c50505050505050505050505050565b600061380961381a565b90506138158282613c54565b919050565b6000604051905090565b600067ffffffffffffffff82111561383f5761383e613de9565b5b61384882613e2c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006138e282613ba0565b91506138ed83613ba0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561392257613921613d2d565b5b828201905092915050565b6000808291508390505b60018511156139775780860481111561395357613952613d2d565b5b60018516156139625780820291505b808102905061397085613e4a565b9450613937565b94509492505050565b600061398b82613ba0565b915061399683613ba0565b92506139c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846139cb565b905092915050565b6000826139db5760019050613a97565b816139e95760009050613a97565b81600181146139ff5760028114613a0957613a38565b6001915050613a97565b60ff841115613a1b57613a1a613d2d565b5b8360020a915084821115613a3257613a31613d2d565b5b50613a97565b5060208310610133831016604e8410600b8410161715613a6d5782820a905083811115613a6857613a67613d2d565b5b613a97565b613a7a848484600161392d565b92509050818404811115613a9157613a90613d2d565b5b81810290505b9392505050565b6000613aa982613ba0565b9150613ab483613ba0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613aed57613aec613d2d565b5b828202905092915050565b6000613b0382613ba0565b9150613b0e83613ba0565b925082821015613b2157613b20613d2d565b5b828203905092915050565b6000613b3782613b80565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613bb582613bbc565b9050919050565b6000613bc782613bce565b9050919050565b6000613bd982613b80565b9050919050565b82818337600083830152505050565b60005b83811015613c0d578082015181840152602081019050613bf2565b83811115613c1c576000848401525b50505050565b60006002820490506001821680613c3a57607f821691505b60208210811415613c4e57613c4d613d8b565b5b50919050565b613c5d82613e2c565b810181811067ffffffffffffffff82111715613c7c57613c7b613de9565b5b80604052505050565b6000613c9082613ba0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cc357613cc2613d2d565b5b600182019050919050565b6000613cd982613ce0565b9050919050565b6000613ceb82613e3d565b9050919050565b6000819050919050565b6000613d0782613ba0565b9150613d1283613ba0565b925082613d2257613d21613d5c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b7f596f7572206368616c6c656e6765206973206e6f74206f766572207965742100600082015250565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b7f596f7520646964206e6f7420726561636820796f757220676f616c0000000000600082015250565b613f5081613b2c565b8114613f5b57600080fd5b50565b613f6781613b3e565b8114613f7257600080fd5b50565b613f7e81613b4a565b8114613f8957600080fd5b50565b613f9581613ba0565b8114613fa057600080fd5b5056fe52657175657374696e67206c696b65732073696e63652074696d657374616d703a202564a2646970667358221220b2e5f54f9ec8feed0c3dd24216acd68d3b3b793a4ba9b03f679f608a4219f8cf64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2384,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 319,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "s_ens",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "s_link",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "s_oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2505,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "oracle",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2507,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "jobId",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2509,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "fee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2735,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "goalIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)2419_storage"
      },
      {
        "astId": 2738,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "goalsAchieved",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2419_storage"
      },
      {
        "astId": 2788,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "idToGoal",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Goal)2763_storage)"
      },
      {
        "astId": 2793,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "userToGoalIds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2797,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "userToLastReqId",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 2802,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "requestIdToGoalRequest",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(GoalRequest)2778_storage)"
      },
      {
        "astId": 2807,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "requestIdToGoalEvaluationRequest",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_struct(GoalEvaluateRequest)2783_storage)"
      },
      {
        "astId": 2811,
        "contract": "contracts/GoalContractV1.sol:GoalContractV1",
        "label": "amountLockedByAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(GoalEvaluateRequest)2783_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GoalContractV1.GoalEvaluateRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(GoalEvaluateRequest)2783_storage"
      },
      "t_mapping(t_bytes32,t_struct(GoalRequest)2778_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GoalContractV1.GoalRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(GoalRequest)2778_storage"
      },
      "t_mapping(t_uint256,t_struct(Goal)2763_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GoalContractV1.Goal)",
        "numberOfBytes": "32",
        "value": "t_struct(Goal)2763_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2419_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2418,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Goal)2763_storage": {
        "encoding": "inplace",
        "label": "struct GoalContractV1.Goal",
        "members": [
          {
            "astId": 2740,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "goalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2742,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "username",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2744,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "goal",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2746,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "current",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2748,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "target",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2750,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2752,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "endDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2754,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "goalOwnerAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2756,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "amountPledged",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2758,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "achieved",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 2760,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "withdrawn",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 2762,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "ended",
            "offset": 2,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(GoalEvaluateRequest)2783_storage": {
        "encoding": "inplace",
        "label": "struct GoalContractV1.GoalEvaluateRequest",
        "members": [
          {
            "astId": 2780,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "goalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2782,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "fulfilled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(GoalRequest)2778_storage": {
        "encoding": "inplace",
        "label": "struct GoalContractV1.GoalRequest",
        "members": [
          {
            "astId": 2765,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "goal",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2767,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "startDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2769,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "endDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2771,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "target",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2773,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "goalOwnerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2775,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "amountPledged",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2777,
            "contract": "contracts/GoalContractV1.sol:GoalContractV1",
            "label": "fulfilled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}